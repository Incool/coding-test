pipeline {
    agent any

    environment {
        // Harbor 配置
        HARBOR_REGISTRY = "192.168.0.47"
        HARBOR_PROJECT = "wordpress"
        IMAGE_NAME = "${HARBOR_REGISTRY}/${HARBOR_PROJECT}/handlestring"
        IMAGE_TAG = "${BUILD_NUMBER}" // 每次构建号作为镜像 tag（唯一）

        // K8S 配置
        KUBECONFIG_CRED_ID = "kubeconfig"  // Jenkins 凭据 ID（类型：Secret File）
        NAMESPACE = "springboot"
    }

    tools {
        maven 'Maven'  // 需要与Jenkins全局配置的中Maven的名称一致
        jdk 'JDK21'  // 需要与Jenkins全局配置的中JDK的名称一致
        git 'Git' // 需要与Jenkins全局配置的中Git的名称一致
    }

    stages {
        // 检出代码
        stage('Checkout') {
            steps {
                git url: 'https://github.com/Incool/coding-test.git',
                    branch: 'master'
            }
        }

        // Maven 打包
        stage('Build with Maven') {
            steps {
                sh 'cd code-test/HandleString && mvn clean package -DskipTests'
            }
        }

        //构建Docker 镜像
        stage('Build Docker Image') {
            steps {
                script {
                    // 推荐：先定义镜像名称变量，避免内联 GString 作为参数直接传入
                    def fullImageName = "${IMAGE_NAME}:${IMAGE_TAG}"
                    docker.build(
                      fullImageName,
                      "--build-arg BUILD_DATE=${currentBuild.timeInMillis} ./code-test/HandleString"
                    )
                }
            }
        }

        // 推送Harbor仓库
        stage('Push to Harbor') {
            steps {
                // 获取 Harbor 凭据
                withCredentials([usernamePassword(
                    credentialsId: 'harbor-creds',
                    usernameVariable: 'HARBOR_USER',
                    passwordVariable: 'HARBOR_PWD'
                )]) {
                    sh "docker login ${HARBOR_REGISTRY} -u ${HARBOR_USER} -p ${HARBOR_PWD}"
                    sh "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
                    sh "docker logout ${HARBOR_REGISTRY}"
                }
            }
        }

        // 部署K8S
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // 使用 kubeconfig 操作 K8S
                    withKubeConfig(credentialsId: KUBECONFIG_CRED_ID, serverUrl: "https://192.168.0.50:6443") {
                        sh """
                            # 检查命名空间是否存在，不存在则创建
                            kubectl get namespace ${NAMESPACE} || kubectl create namespace ${NAMESPACE}

                            # 替换镜像 tag 并应用
                            # sed 是流编辑器，用来做文本替换, 例如: s#A#B#g 表示把字符串 A 全部替换成 B
                            # 在这里就是：把 Deployment.yaml 中的占位符 __IMAGE_TAG__ 替换成 Jenkins 环境变量 ${IMAGE_TAG} 的值
                            # |(管道)： 把 sed 命令的输出结果 传递给下一个命令
                            # -f -：这里的 - 很重要，表示 从标准输入读取配置文件，而不是从磁盘文件读取
                            sed "s#__IMAGE_TAG__#${IMAGE_TAG}#g" code-test/HandleString/Deployment.yaml | kubectl apply -n ${NAMESPACE} -f -

                            # 【新增】部署 HPA 配置文件 Deployment-hpa.yaml 看自己需要
                            kubectl apply -n ${NAMESPACE} -f code-test/HandleString/Deployment-hpa.yaml

                            # 等待滚动更新完成
                            kubectl rollout status deployment/handlestring-deployment -n ${NAMESPACE} --timeout=300s
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo '✅ 部署成功！'
            echo '例如：http://192.168.0.50:30080/api/v1/processor/replaceHandle?input=abcccbad'
        }
        failure {
            echo '❌ 部署失败，请检查日志。'
        }
    }
}